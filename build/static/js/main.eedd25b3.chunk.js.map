{"version":3,"sources":["pages/AuthPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","isLoggingActive","className","type","placeholder","href","AuthPage","setLogin","setState","setRegistration","state","class","onClick","this","value","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAEA,SAASA,EAAKC,GACR,OAAIA,EAAMC,gBAEJ,0BAAMC,UAAU,QACd,2BACIC,KAAK,OACLD,UAAU,cACVE,YAAY,cAEhB,2BACID,KAAK,OACLD,UAAU,cACVE,YAAY,UAEhB,2BACID,KAAK,WACLD,UAAU,cACVE,YAAY,aAEhB,uBAAGC,KAAK,GAAGF,KAAK,SAASD,UAAU,gBAAnC,YAKJ,0BAAMA,UAAU,QACd,2BACIC,KAAK,OACLD,UAAU,cACVE,YAAY,UAEhB,2BACID,KAAK,WACLD,UAAU,cACVE,YAAY,aAEhB,uBAAGC,KAAK,GAAGF,KAAK,SAASD,UAAU,gBAAnC,UAKL,IAAMI,EAAb,kDACE,WAAYN,GAAO,IAAD,8BAChB,cAAMA,IAMRO,SAAW,WACT,EAAKC,SAAS,CACZP,iBAAiB,KATH,EAalBQ,gBAAkB,WAChB,EAAKD,SAAS,CACZP,iBAAiB,KAbnB,EAAKS,MAAQ,CACXT,iBAAiB,GAHH,EADpB,qDAsBI,OACI,yBAAKU,MAAM,QACT,qCACA,yBAAKT,UAAU,YACb,wBAAIA,UAAU,gBAAd,yCACA,uBAAGA,UAAU,kBAAb,wDAGA,yBAAKA,UAAU,eACb,uBAAGA,UAAU,aAAaU,QAASC,KAAKN,UAAxC,SACA,uBAAGL,UAAU,aAAaU,QAASC,KAAKJ,iBAAxC,YAEF,kBAACV,EAAD,CAAMe,MAAOD,KAAKH,MAAMT,kBAExB,yBAAKC,UAAU,cACb,uBAAGA,UAAU,kBAAb,iBACA,uBAAGA,UAAU,eAAb,UACA,uBAAGA,UAAU,eAAb,YACA,uBAAGA,UAAU,eAAb,kBAxCd,GAA8Ba,a,MC9BfC,MARf,WACE,OACE,yBAAKd,UAAU,OACX,kBAAC,EAAD,QCKYe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eedd25b3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nfunction Form(props) {\r\n      if (props.isLoggingActive){\r\n        return(\r\n            <form className=\"form\">\r\n              <input\r\n                  type=\"text\"\r\n                  className=\"form__input\"\r\n                  placeholder=\"Full Name\"\r\n              />\r\n              <input\r\n                  type=\"text\"\r\n                  className=\"form__input\"\r\n                  placeholder=\"Email\"\r\n              />\r\n              <input\r\n                  type=\"password\"\r\n                  className=\"form__input\"\r\n                  placeholder=\"Password\"\r\n              />\r\n              <a href=\"\" type=\"submit\" className=\"form__button\">Sign Up</a>\r\n            </form>\r\n        )\r\n      }\r\n      return (\r\n          <form className=\"form\">\r\n            <input\r\n                type=\"text\"\r\n                className=\"form__input\"\r\n                placeholder=\"Email\"\r\n            />\r\n            <input\r\n                type=\"password\"\r\n                className=\"form__input\"\r\n                placeholder=\"Password\"\r\n            />\r\n            <a href=\"\" type=\"submit\" className=\"form__button\">Login</a>\r\n          </form>\r\n      )\r\n}\r\n\r\nexport class AuthPage extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      isLoggingActive: true,\r\n    }\r\n  }\r\n\r\n  setLogin = () => {\r\n    this.setState({\r\n      isLoggingActive: true\r\n    })\r\n  };\r\n\r\n  setRegistration = () => {\r\n    this.setState({\r\n      isLoggingActive: false\r\n    })\r\n  };\r\n\r\n  render() {\r\n\r\n    return (\r\n        <div class=\"auth\">\r\n          <div>&nbsp;</div>\r\n          <div className=\"formpage\">\r\n            <h2 className=\"form-heading\">Deal with verified business Providers</h2>\r\n            <p className=\"form-paragraph\">\r\n              We help you choose the best business provider easily\r\n            </p>\r\n            <div className=\"auth-toggle\">\r\n              <a className=\"auth-login\" onClick={this.setLogin}>Login</a>\r\n              <a className=\"auth-login\" onClick={this.setRegistration}>Sign Up</a>\r\n            </div>\r\n            <Form value={this.state.isLoggingActive} />\r\n\r\n            <div className=\"form__foot\">\r\n              <p className=\"form-paragraph\">Or login with</p>\r\n              <p className=\"form-social\">Google</p>\r\n              <p className=\"form-social\">Facebook</p>\r\n              <p className=\"form-social\">Twitter</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n  };\r\n\r\n\r\n","import React from 'react';\nimport { AuthPage } from '../src/pages/AuthPage'\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <AuthPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}